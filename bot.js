require("dotenv").config();

const TelegramBot = require("node-telegram-bot-api");
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

bot.setMyCommands([{ command: "/start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" }]);

const softStatus = [
  { name: "–°–æ—Ñ—Ç 1", busy: false, user: "", requestTime: "" },
  { name: "–°–æ—Ñ—Ç 2", busy: false, user: "", requestTime: "" },
  { name: "–°–æ—Ñ—Ç 3", busy: false, user: "", requestTime: "" },
  { name: "–°–æ—Ñ—Ç 4", busy: false, user: "", requestTime: "" },
  { name: "–°–æ—Ñ—Ç 5", busy: false, user: "", requestTime: "" },
];

const chatData = new Map(); // –•—Ä–∞–Ω–∏–º { chatId: messageId }
const userIds = new Set();

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const getKeyboard = () => ({
  reply_markup: {
    inline_keyboard: softStatus.map((soft, index) => [
      {
        text: soft.busy
          ? `${soft.name} ‚Äî –∑–∞–Ω—è–ª ${soft.user} –≤ ${soft.requestTime} üî¥`
          : `${soft.name} ‚Äî –æ—Å–≤–æ–±–æ–¥–∏–ª ${soft.user} –≤ ${soft.requestTime} üü¢`,
        callback_data: `${index}`,
      },
    ]),
  },
});

const sendMainMessage = (chatId) => {
  bot
    .sendMessage(
      chatId,
      "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∑—è—Ç—å —Å–æ—Ñ—Ç –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω—É–∂–Ω–æ–≥–æ —Å–æ—Ñ—Ç–∞. –ß—Ç–æ–±—ã —Å–¥–∞—Ç—å —Å–æ—Ñ—Ç –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ñ—Ç–∞ –≤ —á–∞—Ç.",
      getKeyboard()
    )
    .then((sentMessage) => {
      chatData.set(chatId, sentMessage.message_id); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  userIds.add(chatId);
  console.log(chatId);
  sendMainMessage(chatId)
});

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const updateMessageForAll = () => {
  chatData.forEach((messageId, chatId) => {
    bot
      .editMessageReplyMarkup(getKeyboard().reply_markup, {
        chat_id: chatId,
        message_id: messageId,
      })
      .catch((error) =>
        console.log(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —É ${chatId}:`, error)
      );
  });
};

bot.on("photo", async (msg) => {
  const username = msg.from.username;
  const chatId = msg.chat.id;
  const photoArray = msg.photo;
  const fieldId = photoArray[photoArray.length - 1].file_id;

  const softIndex = softStatus.findIndex(
    (soft) => soft.busy && soft.user === username
  );

  if (softIndex === -1) {
    return bot.sendMessage(chatId, "–í—ã –Ω–µ –∑–∞–Ω–∏–º–∞–ª–∏ —Å–æ—Ñ—Ç, –Ω–µ—á–µ–≥–æ —Å–¥–∞–≤–∞—Ç—å");
  }

  softStatus[softIndex].busy = false;
  softStatus[softIndex].user = "";

  userIds.forEach((chatId) => {
    bot
      .sendPhoto(chatId, fieldId, {
        caption: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} —Å–¥–∞–ª ${softStatus[softIndex].name}`,
        parse_mode: "MarkdownV2",
      })
      .then(() => {
        console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ " + chatId);
      })
      .catch((error) => console.error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ", error));
  });

  updateMessageForAll();
});

bot.on("callback_query", (query) => {
  const index = parseInt(query.data);
  const chatId = query.from.id;
  const username = query.from.username;
  const nowDate = new Date();
  console.log(chatId)
  const requestTime =
    nowDate.getHours() +
    ":" +
    (nowDate.getMinutes() < 10
      ? "0" + nowDate.getMinutes()
      : nowDate.getMinutes());

  // –û—Ç–≤–µ—Ç –Ω–∞ callbackQuery —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
  bot.answerCallbackQuery(query.id);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Å–æ—Ñ—Ç —É–∂–µ –∑–∞–Ω—è—Ç
  if (softStatus[index].busy) {
    // –ï—Å–ª–∏ —Å–æ—Ñ—Ç –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if (softStatus[index].chatId === chatId) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–æ—Ñ—Ç

      bot.sendMessage(
        chatId,
        `${softStatus[index].user}, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç "${softStatus[index].name}"`
      );
      // updateMessageForAll();
      bot.once("photo", (msg) => {
        if (msg.chat.id === chatId) {
          softStatus[index].busy = false;
          softStatus[index].user = username;
          softStatus[index].requestTime = requestTime;
          updateMessageForAll()
        }
      });
    } else {
      // –û—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —Å–æ—Ñ—Ç –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º
      bot.answerCallbackQuery(query.id, {
        text: "–≠—Ç–æ—Ç —Å–æ—Ñ—Ç —É–∂–µ –∑–∞–Ω—è—Ç",
        show_alert: true,
      });
    }
  } else {
    // –ï—Å–ª–∏ —Å–æ—Ñ—Ç —Å–≤–æ–±–æ–¥–µ–Ω
    softStatus[index].busy = true;
    softStatus[index].user = username; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    softStatus[index].chatId = chatId;
    softStatus[index].requestTime = requestTime;
    updateMessageForAll(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    bot.sendMessage(chatId, `–í—ã –≤–∑—è–ª–∏ ${softStatus[index].name}`);
  }
});
